.TH cluf 1 "2018-12-09" "Matthias P. Nowak"
.SH NAME
cluf \- copying used files and maintain symbolic links based on a source directory
.SH SYNOPSIS
.B cluf 
.B [-vds]
.B [\-f\ \fI<file>\fB]
.B [\-p\ \fI<pid_file>\fB]
.B \fI<source> 
.B [\fI<destination>\fB]
.PP

.SH DESCRIPTION
The program \fBcluf\fR watches the accessed files on \fI<source>\fR via the
.BR fanotify (7)
(requires a kernel option) hook. 
The files that are opened, can be recorded in \fI<file>\fR or copied to the \fI<destination>\fR.
The program can be used 

.SH OPTIONS
.TP
.B \-v 
Increase verbosity by one, the higher the more output will be printed.
.TP
.B \-d
After the initialization, the program forks into background and runs a a daemon.
.TP
.B \-s
Shortening the created symlinks. All symlinks are created as with absolute paths.
.TP 
.BI \-f \ <file>
All accessed files are recorded in \fI<file>\fR. 
If a file is accessed several times, it is recorded several times.
This will happen when there is no \fI<destination>\fR.
.TP
.BI \-p \ <pid_file>
For follow up like 
.BR kill (1)
the process id can be recorded in \fI<pid_file>\fR.
.TP
.I <source>
This is the mandatory directory that will be watched. 
It is required that this is a mounted directory, otherwise the 
.BR fanotify (7) 
call will fail.
.TP
.I <destination>
If this argument is given, missing symlinks will be created in this directory and subdirectory pointing to the \fI<source>\fR.
If one opens files under this directory that actually reside in \fI<source>\fR, then the file is copied.


.SH EXAMPLES
.SS Recording example

.TP
cluf -f /tmp/opened-files /ramdisk
Assuming that a ramdisk is mounted at \fI/ramdisk\fR, we are trying to find out which files are actually opened. \
The command above records those files in \fI/tmp/opened-files\fR, and it can be used by programs like \fBcpio\fR to create a smaller ramdisk.

.SS Copying example 
.TP
cluf -sd /newRoot/bigDisk  /newRoot
A new system is mounted under \fI/newRoot\fR. This is the system that will be populated with the necessary files.
Moreover, we will carry out a \fBchroot\fR into that system and work with the programs we want to use later on that system.
The program might be started from an initial ramdisk, where not much of terminal control is established. 
Hence, we use \fI-d\fR in order to send the program into the background. Options without an argument can be combined.

The \fI-s\fR indicates that the created symbolic links will be shortened.
For instance, a link to \fI/newRoot/bigDisk/etc/passwd\fR would be created 
under \fI/newRoot/etc\fR as \fIpasswd\fR pointing to \fI/bigDisk/etc/passwd\fR.

The system will be populated with all opened files as long as the program \fIcluf\fR runs.
The program can be terminated using \fBkill\fR.


.SH SEE ALSO
.BR symlink (7)
.BR chroot (1)
.BR fanotify (7)


